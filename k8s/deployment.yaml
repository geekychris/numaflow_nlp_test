apiVersion: apps/v1
kind: Deployment
metadata:
  name: text-enrichment-app
  namespace: numaflow-system
  labels:
    app: text-enrichment
    component: enrichment-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: text-enrichment
      component: enrichment-service
  template:
    metadata:
      labels:
        app: text-enrichment
        component: enrichment-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Init container to download models
      initContainers:
        - name: model-downloader
          image: numaflow/text-enrichment-app:latest
          imagePullPolicy: Always
          command: ["/app/scripts/download-models.sh"]
          volumeMounts:
            - name: nlp-models
              mountPath: /app/models
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      
      containers:
        - name: enrichment-app
          image: numaflow/text-enrichment-app:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes"
            - name: JAVA_OPTS
              value: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
            - name: SERVER_PORT
              value: "8080"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          # Startup probe (for slower startup times)
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12
            successThreshold: 1
          
          volumeMounts:
            - name: nlp-models
              mountPath: /app/models
              readOnly: true
            - name: app-logs
              mountPath: /app/logs
          
          # Security context for container
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false  # Spring Boot needs write access to temp
      
      # Volumes
      volumes:
        - name: nlp-models
          persistentVolumeClaim:
            claimName: nlp-models-pvc
        - name: app-logs
          emptyDir:
            sizeLimit: 1Gi
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/arch: amd64
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - text-enrichment
                topologyKey: kubernetes.io/hostname
      
      # Tolerations for node scheduling
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"

---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: text-enrichment-service
  namespace: numaflow-system
  labels:
    app: text-enrichment
    component: enrichment-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: text-enrichment
    component: enrichment-service

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: text-enrichment-hpa
  namespace: numaflow-system
  labels:
    app: text-enrichment
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: text-enrichment-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: text-enrichment-pdb
  namespace: numaflow-system
  labels:
    app: text-enrichment
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: text-enrichment
      component: enrichment-service
